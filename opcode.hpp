#pragma once

#include <unordered_map>
#include <string_view>

namespace Porkchop {

enum class Opcode {
    NOP,
    DUP,
    POP,
    JMP,
    JMP0,
    RETURN,
    STRING,
    FUNC,
    LOCAL,
    BIND,
    CONST,
    SCONST,
    FCONST,
    LOAD,
    STORE,
    TLOAD,
    LLOAD,
    LSTORE,
    DLOAD,
    DSTORE,
    CALL,
    AS,
    IS,
    ANY,
    I2B,
    I2C,
    I2F,
    F2I,
    TUPLE,
    LIST,
    SET,
    DICT,
    INEG,
    FNEG,
    NOT,
    INV,
    OR,
    XOR,
    AND,
    SHL,
    SHR,
    USHR,
    SADD,
    IADD,
    FADD,
    ISUB,
    FSUB,
    IMUL,
    FMUL,
    IDIV,
    FDIV,
    IREM,
    FREM,
    INC,
    DEC,
    UCMP,
    ICMP,
    FCMP,
    SCMP,
    LT,
    LE,
    GT,
    GE,
    EQ,
    NE,
    ITER,
    PEEK,
    NEXT,
};

constexpr std::string_view OPCODE_NAME[] = {
    "nop",
    "dup",
    "pop",
    "jmp",
    "jmp0",
    "return",
    "string",
    "func",
    "local",
    "bind",
    "const",
    "sconst",
    "fconst",
    "load",
    "store",
    "tload",
    "lload",
    "lstore",
    "dload",
    "dstore",
    "call",
    "as",
    "is",
    "any",
    "i2b",
    "i2c",
    "i2f",
    "f2i",
    "tuple",
    "list",
    "set",
    "dict",
    "ineg",
    "fneg",
    "not",
    "inv",
    "or",
    "xor",
    "and",
    "shl",
    "shr",
    "ushr",
    "sadd",
    "iadd",
    "fadd",
    "isub",
    "fsub",
    "imul",
    "fmul",
    "idiv",
    "fdiv",
    "irem",
    "frem",
    "inc",
    "dec",
    "ucmp",
    "icmp",
    "fcmp",
    "scmp",
    "lt",
    "le",
    "gt",
    "ge",
    "eq",
    "ne",
    "iter",
    "peek",
    "next",
};

const std::unordered_map<std::string_view, Opcode> OPCODES {
    {"nop", Opcode::NOP},
    {"dup", Opcode::DUP},
    {"pop", Opcode::POP},
    {"jmp", Opcode::JMP},
    {"jmp0", Opcode::JMP0},
    {"return", Opcode::RETURN},
    {"string", Opcode::STRING},
    {"func", Opcode::FUNC},
    {"local", Opcode::LOCAL},
    {"bind", Opcode::BIND},
    {"const", Opcode::CONST},
    {"sconst", Opcode::SCONST},
    {"fconst", Opcode::FCONST},
    {"load", Opcode::LOAD},
    {"store", Opcode::STORE},
    {"tload", Opcode::TLOAD},
    {"lload", Opcode::LLOAD},
    {"lstore", Opcode::LSTORE},
    {"dload", Opcode::DLOAD},
    {"dstore", Opcode::DSTORE},
    {"call", Opcode::CALL},
    {"as", Opcode::AS},
    {"is", Opcode::IS},
    {"any", Opcode::ANY},
    {"i2b", Opcode::I2B},
    {"i2c", Opcode::I2C},
    {"i2f", Opcode::I2F},
    {"f2i", Opcode::F2I},
    {"tuple", Opcode::TUPLE},
    {"list", Opcode::LIST},
    {"set", Opcode::SET},
    {"dict", Opcode::DICT},
    {"ineg", Opcode::INEG},
    {"fneg", Opcode::FNEG},
    {"not", Opcode::NOT},
    {"inv", Opcode::INV},
    {"or", Opcode::OR},
    {"xor", Opcode::XOR},
    {"and", Opcode::AND},
    {"shl", Opcode::SHL},
    {"shr", Opcode::SHR},
    {"ushr", Opcode::USHR},
    {"sadd", Opcode::SADD},
    {"iadd", Opcode::IADD},
    {"fadd", Opcode::FADD},
    {"isub", Opcode::ISUB},
    {"fsub", Opcode::FSUB},
    {"imul", Opcode::IMUL},
    {"fmul", Opcode::FMUL},
    {"idiv", Opcode::IDIV},
    {"fdiv", Opcode::FDIV},
    {"irem", Opcode::IREM},
    {"frem", Opcode::FREM},
    {"inc", Opcode::INC},
    {"dec", Opcode::DEC},
    {"ucmp", Opcode::UCMP},
    {"icmp", Opcode::ICMP},
    {"fcmp", Opcode::FCMP},
    {"scmp", Opcode::SCMP},
    {"lt", Opcode::LT},
    {"le", Opcode::LE},
    {"gt", Opcode::GT},
    {"ge", Opcode::GE},
    {"eq", Opcode::EQ},
    {"ne", Opcode::NE},
    {"iter", Opcode::ITER},
    {"peek", Opcode::PEEK},
    {"next", Opcode::NEXT},
};

}